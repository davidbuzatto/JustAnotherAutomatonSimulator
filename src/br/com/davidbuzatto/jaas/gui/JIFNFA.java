/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package br.com.davidbuzatto.jaas.gui;

import br.com.davidbuzatto.jaas.fa.DFA;
import br.com.davidbuzatto.jaas.fa.DrawingTransition;
import br.com.davidbuzatto.jaas.fa.NFA;
import br.com.davidbuzatto.jaas.fa.ProcessingString;
import br.com.davidbuzatto.jaas.fa.ProcessingStringLabelType;
import br.com.davidbuzatto.jaas.fa.State;
import br.com.davidbuzatto.jaas.utils.AppPrefs;
import br.com.davidbuzatto.jaas.utils.Constants;
import br.com.davidbuzatto.jaas.utils.Utils;
import java.awt.Color;
import java.awt.Font;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.ArrayList;
import java.util.List;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JColorChooser;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.SwingUtilities;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author David
 */
public class JIFNFA extends javax.swing.JInternalFrame {

    private NFA nfa;
    private State selectedState;
    private DrawingTransition selectedDrawingTransition;
    
    private State selectedSourceState;
    private State selectedTargetState;
    
    private State mouseOverState;
    private DrawingTransition mouseOverDrawingTransition;
    
    private double xPrev;
    private double yPrev;
    private double xPressed;
    private double yPressed;
    
    private boolean runningSimulation;
    private int currentSimulationIndex;
    private boolean simulationResult;
    private List<State> simulationSteps;
    private State currentSimulationState;
    private ProcessingString processingString;
            
    
    /**
     * Creates new form JIFNFA
     */
    public JIFNFA( boolean createExample ) {
        
        initComponents();
        
        setFrameIcon( new ImageIcon( getClass().getResource( "/br/com/davidbuzatto/jaas/gui/icons/nfa.png" ) ) );
        jifTests.setFrameIcon( new ImageIcon( getClass().getResource( "/br/com/davidbuzatto/jaas/gui/icons/nfa.png" ) ) );
        
        nfa = new NFA();
        drawPanel.setMainShape( nfa );
        
        if ( createExample ) {
            createExample( );
        }
        
        drawPanel.repaint();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings( "unchecked" )
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnGroup = new javax.swing.ButtonGroup();
        popupMenu = new javax.swing.JPopupMenu();
        itemInitial = new javax.swing.JMenuItem();
        itemFinal = new javax.swing.JMenuItem();
        sepPop1 = new javax.swing.JPopupMenu.Separator();
        itemTransitions = new javax.swing.JMenuItem();
        sepPop2 = new javax.swing.JPopupMenu.Separator();
        itemColor = new javax.swing.JMenuItem();
        itemAlias = new javax.swing.JMenuItem();
        sepPop3 = new javax.swing.JPopupMenu.Separator();
        itemRemove = new javax.swing.JMenuItem();
        toolbar = new javax.swing.JToolBar();
        btnAddState = new javax.swing.JToggleButton();
        btnAddTransition = new javax.swing.JToggleButton();
        btnMove = new javax.swing.JToggleButton();
        sepTool1 = new javax.swing.JToolBar.Separator();
        btnShowFormalDefinition = new javax.swing.JButton();
        btnShowEquivalentDFA = new javax.swing.JButton();
        sepTool2 = new javax.swing.JToolBar.Separator();
        btnSave = new javax.swing.JButton();
        btnLoad = new javax.swing.JButton();
        btnSaveAsImage = new javax.swing.JButton();
        sepTool3 = new javax.swing.JToolBar.Separator();
        btnClear = new javax.swing.JButton();
        drawPanel = new br.com.davidbuzatto.jaas.gui.DrawPanel();
        jifTests = new javax.swing.JInternalFrame();
        panelStrings = new javax.swing.JPanel();
        scrollStrings = new javax.swing.JScrollPane();
        areaStrings = new javax.swing.JTextArea();
        btnTestStrings = new javax.swing.JButton();
        panelSimulation = new javax.swing.JPanel();
        lblStringSImulation = new javax.swing.JLabel();
        txtStringSimulation = new javax.swing.JTextField();
        btnEvaluateSimulation = new javax.swing.JButton();
        btnPreviousStep = new javax.swing.JButton();
        btnNextStep = new javax.swing.JButton();
        btnClearSimulation = new javax.swing.JButton();

        popupMenu.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
                popupMenuPopupMenuCanceled(evt);
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
            }
        });

        itemInitial.setText("set as initial");
        itemInitial.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemInitialActionPerformed(evt);
            }
        });
        popupMenu.add(itemInitial);

        itemFinal.setText("final");
        itemFinal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemFinalActionPerformed(evt);
            }
        });
        popupMenu.add(itemFinal);
        popupMenu.add(sepPop1);

        itemTransitions.setText("transitions");
        itemTransitions.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemTransitionsActionPerformed(evt);
            }
        });
        popupMenu.add(itemTransitions);
        popupMenu.add(sepPop2);

        itemColor.setText("color");
        itemColor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemColorActionPerformed(evt);
            }
        });
        popupMenu.add(itemColor);

        itemAlias.setText("alias");
        itemAlias.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemAliasActionPerformed(evt);
            }
        });
        popupMenu.add(itemAlias);
        popupMenu.add(sepPop3);

        itemRemove.setText("remove");
        itemRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemRemoveActionPerformed(evt);
            }
        });
        popupMenu.add(itemRemove);

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("NFA - Nondeterministic Finite Automaton");

        toolbar.setFloatable(false);

        btnGroup.add(btnAddState);
        btnAddState.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/davidbuzatto/jaas/gui/icons/ellipse.png"))); // NOI18N
        btnAddState.setMnemonic('S');
        btnAddState.setToolTipText("Add state");
        btnAddState.setFocusable(false);
        btnAddState.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnAddState.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnAddState.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddStateActionPerformed(evt);
            }
        });
        toolbar.add(btnAddState);

        btnGroup.add(btnAddTransition);
        btnAddTransition.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/davidbuzatto/jaas/gui/icons/arrow_right.png"))); // NOI18N
        btnAddTransition.setMnemonic('T');
        btnAddTransition.setToolTipText("Add transition");
        btnAddTransition.setFocusable(false);
        btnAddTransition.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnAddTransition.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnAddTransition.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddTransitionActionPerformed(evt);
            }
        });
        toolbar.add(btnAddTransition);

        btnGroup.add(btnMove);
        btnMove.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/davidbuzatto/jaas/gui/icons/cursor_openhand.png"))); // NOI18N
        btnMove.setMnemonic('M');
        btnMove.setSelected(true);
        btnMove.setToolTipText("Move");
        btnMove.setFocusable(false);
        btnMove.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnMove.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnMove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMoveActionPerformed(evt);
            }
        });
        toolbar.add(btnMove);
        toolbar.add(sepTool1);

        btnShowFormalDefinition.setFont(new java.awt.Font("Segoe UI", 3, 12)); // NOI18N
        btnShowFormalDefinition.setForeground(new java.awt.Color(0, 204, 153));
        btnShowFormalDefinition.setText("A = (...)");
        btnShowFormalDefinition.setToolTipText("Formal Definition");
        btnShowFormalDefinition.setFocusable(false);
        btnShowFormalDefinition.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnShowFormalDefinition.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnShowFormalDefinition.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShowFormalDefinitionActionPerformed(evt);
            }
        });
        toolbar.add(btnShowFormalDefinition);

        btnShowEquivalentDFA.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/davidbuzatto/jaas/gui/icons/dfa.png"))); // NOI18N
        btnShowEquivalentDFA.setToolTipText("Show equivalent DFA");
        btnShowEquivalentDFA.setFocusable(false);
        btnShowEquivalentDFA.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnShowEquivalentDFA.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnShowEquivalentDFA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShowEquivalentDFAActionPerformed(evt);
            }
        });
        toolbar.add(btnShowEquivalentDFA);
        toolbar.add(sepTool2);

        btnSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/davidbuzatto/jaas/gui/icons/disk.png"))); // NOI18N
        btnSave.setToolTipText("Save");
        btnSave.setFocusable(false);
        btnSave.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnSave.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });
        toolbar.add(btnSave);

        btnLoad.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/davidbuzatto/jaas/gui/icons/folder.png"))); // NOI18N
        btnLoad.setToolTipText("Load");
        btnLoad.setFocusable(false);
        btnLoad.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnLoad.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnLoad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoadActionPerformed(evt);
            }
        });
        toolbar.add(btnLoad);

        btnSaveAsImage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/davidbuzatto/jaas/gui/icons/picture.png"))); // NOI18N
        btnSaveAsImage.setToolTipText("Save as Image");
        btnSaveAsImage.setFocusable(false);
        btnSaveAsImage.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnSaveAsImage.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnSaveAsImage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveAsImageActionPerformed(evt);
            }
        });
        toolbar.add(btnSaveAsImage);
        toolbar.add(sepTool3);

        btnClear.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/davidbuzatto/jaas/gui/icons/delete.png"))); // NOI18N
        btnClear.setToolTipText("Clear");
        btnClear.setFocusable(false);
        btnClear.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnClear.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });
        toolbar.add(btnClear);

        drawPanel.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                drawPanelMouseDragged(evt);
            }
            public void mouseMoved(java.awt.event.MouseEvent evt) {
                drawPanelMouseMoved(evt);
            }
        });
        drawPanel.addMouseWheelListener(new java.awt.event.MouseWheelListener() {
            public void mouseWheelMoved(java.awt.event.MouseWheelEvent evt) {
                drawPanelMouseWheelMoved(evt);
            }
        });
        drawPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                drawPanelMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                drawPanelMouseReleased(evt);
            }
        });

        javax.swing.GroupLayout drawPanelLayout = new javax.swing.GroupLayout(drawPanel);
        drawPanel.setLayout(drawPanelLayout);
        drawPanelLayout.setHorizontalGroup(
            drawPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        drawPanelLayout.setVerticalGroup(
            drawPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 458, Short.MAX_VALUE)
        );

        jifTests.setTitle("Tests");
        jifTests.setFocusable(false);
        jifTests.setVisible(true);

        panelStrings.setBorder(javax.swing.BorderFactory.createTitledBorder("Strings"));

        areaStrings.setColumns(20);
        areaStrings.setRows(5);
        scrollStrings.setViewportView(areaStrings);

        btnTestStrings.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/davidbuzatto/jaas/gui/icons/tick.png"))); // NOI18N
        btnTestStrings.setToolTipText("test");
        btnTestStrings.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTestStringsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelStringsLayout = new javax.swing.GroupLayout(panelStrings);
        panelStrings.setLayout(panelStringsLayout);
        panelStringsLayout.setHorizontalGroup(
            panelStringsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelStringsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(scrollStrings, javax.swing.GroupLayout.DEFAULT_SIZE, 276, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnTestStrings)
                .addContainerGap())
        );
        panelStringsLayout.setVerticalGroup(
            panelStringsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelStringsLayout.createSequentialGroup()
                .addGroup(panelStringsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(panelStringsLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnTestStrings))
                    .addComponent(scrollStrings))
                .addContainerGap())
        );

        panelSimulation.setBorder(javax.swing.BorderFactory.createTitledBorder("Simulation"));

        lblStringSImulation.setText("String:");

        btnEvaluateSimulation.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/davidbuzatto/jaas/gui/icons/accept.png"))); // NOI18N
        btnEvaluateSimulation.setToolTipText("run");
        btnEvaluateSimulation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEvaluateSimulationActionPerformed(evt);
            }
        });

        btnPreviousStep.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/davidbuzatto/jaas/gui/icons/arrow_left.png"))); // NOI18N
        btnPreviousStep.setToolTipText("run");
        btnPreviousStep.setEnabled(false);
        btnPreviousStep.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPreviousStepActionPerformed(evt);
            }
        });

        btnNextStep.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/davidbuzatto/jaas/gui/icons/arrow_right.png"))); // NOI18N
        btnNextStep.setToolTipText("run");
        btnNextStep.setEnabled(false);
        btnNextStep.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNextStepActionPerformed(evt);
            }
        });

        btnClearSimulation.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/davidbuzatto/jaas/gui/icons/delete.png"))); // NOI18N
        btnClearSimulation.setToolTipText("clear");
        btnClearSimulation.setEnabled(false);
        btnClearSimulation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearSimulationActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelSimulationLayout = new javax.swing.GroupLayout(panelSimulation);
        panelSimulation.setLayout(panelSimulationLayout);
        panelSimulationLayout.setHorizontalGroup(
            panelSimulationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelSimulationLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelSimulationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelSimulationLayout.createSequentialGroup()
                        .addComponent(lblStringSImulation)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtStringSimulation, javax.swing.GroupLayout.DEFAULT_SIZE, 234, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelSimulationLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnEvaluateSimulation)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnPreviousStep)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnNextStep)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnClearSimulation)))
                .addContainerGap())
        );
        panelSimulationLayout.setVerticalGroup(
            panelSimulationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelSimulationLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelSimulationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblStringSImulation)
                    .addComponent(txtStringSimulation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(panelSimulationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnEvaluateSimulation)
                    .addComponent(btnClearSimulation)
                    .addComponent(btnNextStep)
                    .addComponent(btnPreviousStep))
                .addContainerGap(50, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jifTestsLayout = new javax.swing.GroupLayout(jifTests.getContentPane());
        jifTests.getContentPane().setLayout(jifTestsLayout);
        jifTestsLayout.setHorizontalGroup(
            jifTestsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jifTestsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panelStrings, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelSimulation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(162, Short.MAX_VALUE))
        );
        jifTestsLayout.setVerticalGroup(
            jifTestsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jifTestsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jifTestsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jifTestsLayout.createSequentialGroup()
                        .addComponent(panelSimulation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(panelStrings, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(toolbar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(drawPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jifTests)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(toolbar, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(drawPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jifTests, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void itemInitialActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemInitialActionPerformed
        
        if ( selectedState != null ) {
            
            if ( nfa.getInitial() != null ) {
                nfa.getInitial().setInitial( false );
            }
            
            selectedState.setInitial( true );
            nfa.setInitial( selectedState );
            
        }
        
        clearSelectedShapes();
        drawPanel.repaint();
        
    }//GEN-LAST:event_itemInitialActionPerformed

    private void itemFinalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemFinalActionPerformed
        
        if ( selectedState != null ) {
            selectedState.setFinal( !selectedState.isFinal() );
        }
        
        clearSelectedShapes();
        drawPanel.repaint();
        
    }//GEN-LAST:event_itemFinalActionPerformed

    private void itemRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemRemoveActionPerformed
        
        if ( JOptionPane.showConfirmDialog( this, 
                "Remove state?", 
                "Remove", 
                JOptionPane.YES_NO_OPTION ) == JOptionPane.YES_OPTION ) {
            
            if ( selectedState != null ) {
                nfa.removeState( selectedState );
            }

            clearSelectedShapes();
            drawPanel.repaint();
            
        }
        
    }//GEN-LAST:event_itemRemoveActionPerformed

    private void popupMenuPopupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_popupMenuPopupMenuCanceled
        clearSelectedShapes();
    }//GEN-LAST:event_popupMenuPopupMenuCanceled

    private void btnAddStateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddStateActionPerformed
        clearSelectedShapes();
    }//GEN-LAST:event_btnAddStateActionPerformed

    private void btnAddTransitionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddTransitionActionPerformed
        clearSelectedShapes();
    }//GEN-LAST:event_btnAddTransitionActionPerformed

    private void btnMoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMoveActionPerformed
        clearSelectedShapes();
    }//GEN-LAST:event_btnMoveActionPerformed

    private void drawPanelMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_drawPanelMousePressed
        
        if ( !runningSimulation ) {
            
            xPressed = evt.getX();
            yPressed = evt.getY();

            if ( SwingUtilities.isLeftMouseButton( evt ) ) {

                lookForSelectedShapes();

                if ( btnAddState.isSelected() ) {

                    nfa.addState( false, false, evt.getX(), evt.getY() );

                } else if ( btnAddTransition.isSelected() ) {

                    if ( selectedSourceState == null ) {

                        selectedSourceState = nfa.getInterceptedState( evt.getX(), evt.getY() );

                        if ( selectedSourceState != null ) {
                            selectedSourceState.setSelected( true );
                        }

                    } else if ( selectedTargetState == null ) {

                        selectedTargetState = nfa.getInterceptedState( evt.getX(), evt.getY() );

                        if ( selectedTargetState != null ) {

                            selectedTargetState.setSelected( true );

                            if ( selectedTargetState != null ) {

                                String symbols = JOptionPane.showInputDialog( this, 
                                        String.format( "(%s) -> (%s) transition(s) symbol",
                                                selectedSourceState, selectedTargetState ) );

                                boolean duplicate = false;

                                if ( symbols != null ) {

                                    for ( char s : symbols.toCharArray() ) {
                                        try {
                                            nfa.addTransition( selectedSourceState, selectedTargetState, s );
                                        } catch ( IllegalArgumentException exc ) {
                                            duplicate = true;
                                        }
                                    }

                                }

                                if ( duplicate ) {
                                    JOptionPane.showMessageDialog( this, "Duplicated symbols were ignored!" );
                                }

                                selectedSourceState.setSelected( false );
                                selectedTargetState.setSelected( false );

                                selectedSourceState = null;
                                selectedTargetState = null;

                            }

                        }

                    }

                } else if ( btnMove.isSelected() ) {

                    if ( selectedState != null || selectedDrawingTransition != null ) {

                        xPrev = xPressed;
                        yPrev = yPressed;

                    }

                }

            } else if ( SwingUtilities.isRightMouseButton( evt ) ) {

                clearSelectedShapes();
                lookForSelectedShapes();

                if ( selectedState != null ) {

                    btnMove.setSelected( true );

                    if ( selectedState.isInitial() ) {
                        itemInitial.setVisible( false );
                    } else {
                        itemInitial.setVisible( true );
                    }

                    if ( selectedState.isFinal() ) {
                        itemFinal.setText( "unset final" );
                    } else {
                        itemFinal.setText( "set as final" );
                    }

                    popupMenu.show( this, evt.getX() + 20, evt.getY() + 50 );

                }
                
                if ( btnMove.isSelected() ) {

                    xPrev = xPressed;
                    yPrev = yPressed;

                }

            }

            drawPanel.repaint();
        
        }
        
    }//GEN-LAST:event_drawPanelMousePressed

    private void drawPanelMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_drawPanelMouseReleased
        
        if ( !runningSimulation ) {
            
            if ( SwingUtilities.isLeftMouseButton( evt ) ) {

                if ( !btnAddTransition.isSelected() ) {
                    clearSelectedShapes();
                }

                drawPanel.repaint();

            }
            
        }
        
    }//GEN-LAST:event_drawPanelMouseReleased

    private void drawPanelMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_drawPanelMouseDragged
        
        if ( !runningSimulation ) {
            
            if ( SwingUtilities.isLeftMouseButton( evt ) ) {

                if ( btnAddState.isSelected() ) {

                } else if ( btnAddTransition.isSelected() ) {

                } else if ( btnMove.isSelected() && ( selectedState != null || selectedDrawingTransition != null ) ) {
                    
                    if ( selectedState != null ) {
                        selectedState.move( evt.getX() - xPrev, evt.getY() - yPrev );
                    }
                    if ( selectedDrawingTransition != null ) {
                        selectedDrawingTransition.move( evt.getX() - xPrev, evt.getY() - yPrev );
                    }

                    xPrev = evt.getX();
                    yPrev = evt.getY();

                }

            } else if ( SwingUtilities.isRightMouseButton( evt ) ) {
                
                if ( btnMove.isSelected() ) {
                    
                    nfa.move( evt.getX() - xPrev, evt.getY() - yPrev );

                    xPrev = evt.getX();
                    yPrev = evt.getY();
                
                }
                
            }

            drawPanel.repaint();
            
        }
        
    }//GEN-LAST:event_drawPanelMouseDragged

    private void btnShowFormalDefinitionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnShowFormalDefinitionActionPerformed
        FormalDefinitionDialog fd = new FormalDefinitionDialog( null, nfa, true );
        fd.setVisible( true );
    }//GEN-LAST:event_btnShowFormalDefinitionActionPerformed

    private void btnTestStringsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTestStringsActionPerformed
        
        String[] strings = areaStrings.getText().split( "\n" );
        StringBuilder sb = new StringBuilder();
        
        try {
            
            for ( String string : strings ) {
                sb.append( String.format( "%s %s L(A)\n", 
                        string.length() == 0 ? "\u03B5" : string, 
                        nfa.accepts( string, null ) ? "\u2208" : "\u2209" ) );
            }

            JOptionPane.showMessageDialog( this, createJTextAreaShowData( sb.toString(), 20, 50 ), 
                    "Test Results", JOptionPane.INFORMATION_MESSAGE );
            
        } catch ( IllegalStateException exc ) {
            
            JOptionPane.showMessageDialog( this, exc.getMessage(), 
                    "ERROR", JOptionPane.ERROR_MESSAGE );
            
        }
        
    }//GEN-LAST:event_btnTestStringsActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        
        try {
            
            JFileChooser jfc = new JFileChooser( new File( AppPrefs.getPref( AppPrefs.DEFAULT_DIR ) ) );
            jfc.setDialogTitle( "Save NFA" );
            jfc.setMultiSelectionEnabled( false );
            jfc.setFileSelectionMode( JFileChooser.FILES_ONLY );
            jfc.removeChoosableFileFilter( jfc.getFileFilter() );
            jfc.setFileFilter( new FileNameExtensionFilter( "JAAS NFA Definition File", "jaasnfa" ) );
            jfc.setSelectedFile( new File( "nfa.jaasnfa" ) );
            
            if ( jfc.showSaveDialog( this ) == JFileChooser.APPROVE_OPTION ) {
                
                File f = jfc.getSelectedFile();
                boolean save = true;

                if ( f.exists() ) {
                    if ( JOptionPane.showConfirmDialog( null, 
                            "Do you whant to overwrite the existing file?", 
                            "Confirm", 
                            JOptionPane.YES_NO_OPTION ) == JOptionPane.NO_OPTION ) {
                        save = false;
                    }
                } else {
                    if ( !f.getName().endsWith( ".jaasnfa" ) ) {
                        f = new File( f.getAbsolutePath() + ".jaasnfa" );
                    }
                }

                if ( save ) {
                    AppPrefs.setPref( AppPrefs.DEFAULT_DIR, f.getParentFile().getAbsolutePath() );
                    try ( ObjectOutputStream oos = new ObjectOutputStream( new FileOutputStream( f ) ) ) {
                        oos.writeObject( nfa );
                    } catch ( FileNotFoundException exc ) {
                        exc.printStackTrace();
                    }
                }
                
            }
            
        } catch ( IOException exc ) {
            exc.printStackTrace();
        }
        
    }//GEN-LAST:event_btnSaveActionPerformed

    private void btnLoadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoadActionPerformed
        
        try {
            
            JFileChooser jfc = new JFileChooser( new File( AppPrefs.getPref( AppPrefs.DEFAULT_DIR ) ) );
            jfc.setDialogTitle( "Load NFA" );
            jfc.setMultiSelectionEnabled( false );
            jfc.setFileSelectionMode( JFileChooser.FILES_ONLY );
            jfc.removeChoosableFileFilter( jfc.getFileFilter() );
            jfc.setFileFilter( new FileNameExtensionFilter( "JAAS NFA Definition File", "jaasnfa" ) );
            jfc.setSelectedFile( new File( "nfa.jaasnfa" ) );
            
            if ( jfc.showOpenDialog( this ) == JFileChooser.APPROVE_OPTION ) {
                
                File f = jfc.getSelectedFile();

                if ( f.exists() ) {
                    
                    AppPrefs.setPref( AppPrefs.DEFAULT_DIR, f.getParentFile().getAbsolutePath() );
                    
                    try ( ObjectInputStream ois = new ObjectInputStream( new FileInputStream( f ) ) ) {
                        
                        nfa = (NFA) ois.<NFA>readObject();
                        drawPanel.setMainShape( nfa );
                        drawPanel.repaint();
                        
                    } catch ( FileNotFoundException exc ) {
                        exc.printStackTrace();
                    }
                    
                }
                
            }
            
        } catch ( IOException | ClassNotFoundException exc ) {
            exc.printStackTrace();
        }
        
    }//GEN-LAST:event_btnLoadActionPerformed

    private void btnSaveAsImageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveAsImageActionPerformed
        
        try {
            
            JFileChooser jfc = new JFileChooser( new File( AppPrefs.getPref( AppPrefs.DEFAULT_DIR ) ) );
            jfc.setDialogTitle( "Save as Image" );
            jfc.setMultiSelectionEnabled( false );
            jfc.setFileSelectionMode( JFileChooser.FILES_ONLY );
            jfc.removeChoosableFileFilter( jfc.getFileFilter() );
            jfc.setFileFilter( new FileNameExtensionFilter( "Portable Network Graphics", "png" ) );
            jfc.setSelectedFile( new File( "nfa.png" ) );
            
            if ( jfc.showSaveDialog( this ) == JFileChooser.APPROVE_OPTION ) {
                
                File f = jfc.getSelectedFile();
                boolean save = true;

                if ( f.exists() ) {
                    if ( JOptionPane.showConfirmDialog( null, 
                            "Do you whant to overwrite the existing file?", 
                            "Confirm", 
                            JOptionPane.YES_NO_OPTION ) == JOptionPane.NO_OPTION ) {
                        save = false;
                    }
                } else {
                    if ( !f.getName().endsWith( ".png" ) ) {
                        f = new File( f.getAbsolutePath() + ".png" );
                    }
                }

                if ( save ) {
                    AppPrefs.setPref( AppPrefs.DEFAULT_DIR, f.getParentFile().getAbsolutePath() );
                    ImageIO.write( drawPanel.getImage(), "png", f );
                }
                
            }
            
        } catch ( IOException exc ) {
            exc.printStackTrace();
        }
        
    }//GEN-LAST:event_btnSaveAsImageActionPerformed

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        
        if ( JOptionPane.showConfirmDialog( 
                this, 
                "Clear the current NFA?", 
                "Confirmation", 
                JOptionPane.YES_NO_OPTION ) == JOptionPane.YES_OPTION ) {
            
            nfa.clear();
        
        }
        
        drawPanel.repaint();
        
    }//GEN-LAST:event_btnClearActionPerformed

    private void itemTransitionsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemTransitionsActionPerformed
        
        ChangeTransitionsDialog ctd = new ChangeTransitionsDialog( null, selectedState, true );
        ctd.setVisible( true );
        
        clearSelectedShapes();
        drawPanel.repaint();
        
    }//GEN-LAST:event_itemTransitionsActionPerformed

    private void itemColorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemColorActionPerformed
        
        Color c = JColorChooser.showDialog( this, "State Color", selectedState.getStrokeColor(), true );
        
        if ( c != null ) {
            selectedState.setStrokeColor( c );
        }
        
        clearSelectedShapes();
        drawPanel.repaint();
        
    }//GEN-LAST:event_itemColorActionPerformed

    private void btnEvaluateSimulationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEvaluateSimulationActionPerformed
        
        try {
            
            simulationSteps = new ArrayList<>();
            simulationResult = nfa.accepts( txtStringSimulation.getText(), simulationSteps );
            
            changeGUI( false );
            btnClearSimulation.setEnabled( true );
            btnNextStep.setEnabled( true );
            runningSimulation = true;

            processingString = new ProcessingString( 
                    txtStringSimulation.getText(), 
                    Constants.PROCESSING_STRING_COLOR, 
                    Constants.PROCESSING_STRING_CURRENT_SYMBOL_COLOR,
                    Constants.PROCESSING_STRING_CONTROL_COLOR,
                    0, 
                    ProcessingStringLabelType.INTERNAL_STATES,
                    drawPanel.getWidth() / 2, drawPanel.getHeight() - 10 );

            drawPanel.setTempShape( processingString );

            currentSimulationIndex = 0;

            processingString.setCurrentSymbol( currentSimulationIndex );
            currentSimulationState = simulationSteps.get( currentSimulationIndex );
            processingString.setCurrentState( currentSimulationState );
            
            changeInternalStatesSelection( currentSimulationState, true );
            drawPanel.repaint();
            
        } catch ( IllegalStateException exc ) {
            
            JOptionPane.showMessageDialog( this, exc.getMessage(), 
                    "ERROR", JOptionPane.ERROR_MESSAGE );
            
        }
        
    }//GEN-LAST:event_btnEvaluateSimulationActionPerformed

    private void btnClearSimulationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearSimulationActionPerformed
        
        if ( currentSimulationState != null ) {
            changeInternalStatesSelection( currentSimulationState, false );
            currentSimulationState = null;
            processingString.setCurrentState( null );
        }
        
        drawPanel.setTempShape( null );
        runningSimulation = false;
        
        changeGUI( true );
        btnNextStep.setEnabled( false );
        btnPreviousStep.setEnabled( false );
        btnClearSimulation.setEnabled( false );
        
        drawPanel.repaint();
        
    }//GEN-LAST:event_btnClearSimulationActionPerformed

    private void btnShowEquivalentDFAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnShowEquivalentDFAActionPerformed
        
        try {
            
            DFA dfa = nfa.constructEquivalentDFA();
            JIFDFA jif = new JIFDFA( true, dfa, ProcessingStringLabelType.ALIAS );
            getDesktopPane().add( jif );
            
            Utils.organize( dfa, jif.getDrawPanel().getWidth() / 2, jif.getDrawPanel().getHeight() / 2, 200 );
            
            jif.setVisible( true );
            
        } catch ( IllegalStateException exc ) {
            JOptionPane.showMessageDialog( this, exc.getMessage(), "ERROR", JOptionPane.ERROR_MESSAGE );
        }
        
    }//GEN-LAST:event_btnShowEquivalentDFAActionPerformed

    private void itemAliasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemAliasActionPerformed
        
        String alias = JOptionPane.showInputDialog( 
                this, 
                String.format( "\"%s\" alias (empty to default):", selectedState ), 
                selectedState.getAlias() == null ? "" : selectedState.getAlias() );
        
        if ( alias != null && !alias.isBlank()) {
            selectedState.setAlias( alias.trim() );
        } else {
            selectedState.setAlias( null );
        }
        
        clearSelectedShapes();
        drawPanel.repaint();
        
    }//GEN-LAST:event_itemAliasActionPerformed

    private void drawPanelMouseMoved(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_drawPanelMouseMoved
        
        if ( !runningSimulation ) {
            
            if ( selectedState == null ) {

                if ( mouseOverState != null ) {
                    mouseOverState.setMouseOver( false );
                }

                mouseOverState = nfa.getInterceptedState( evt.getX(), evt.getY() );

                if ( mouseOverState != null ) {
                    mouseOverState.setMouseOver( true );
                }

                drawPanel.repaint();

            }

            if ( mouseOverDrawingTransition != null ) {
                mouseOverDrawingTransition.setMouseOver( false );
            }

            mouseOverDrawingTransition = nfa.getInterceptedDrawingTransition( evt.getX(), evt.getY() );

            if ( mouseOverDrawingTransition != null ) {
                mouseOverDrawingTransition.setMouseOver( true );
                drawPanel.repaint();
            }
        
        }
        
    }//GEN-LAST:event_drawPanelMouseMoved

    private void drawPanelMouseWheelMoved(java.awt.event.MouseWheelEvent evt) {//GEN-FIRST:event_drawPanelMouseWheelMoved
        
        if ( mouseOverDrawingTransition != null ) {
            if ( evt.getPreciseWheelRotation() > 0 ) {
                mouseOverDrawingTransition.changeControlPointMagnitude( -1 );
            } else {
                mouseOverDrawingTransition.changeControlPointMagnitude( 1 );
            }
            drawPanel.repaint();
        }
        
    }//GEN-LAST:event_drawPanelMouseWheelMoved

    private void btnNextStepActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNextStepActionPerformed
        
        processingStringToDefault();
        btnPreviousStep.setEnabled( true );
        
        if ( currentSimulationIndex < simulationSteps.size() - 1 ) {
            
            currentSimulationIndex++;
            changeInternalStatesSelection( currentSimulationState, false );

            processingString.setCurrentSymbol( currentSimulationIndex );

            currentSimulationState = simulationSteps.get( currentSimulationIndex );
            processingString.setCurrentState( currentSimulationState );

            changeInternalStatesSelection( currentSimulationState, true );
        
        }
        
        if ( currentSimulationIndex == simulationSteps.size() - 1 ) {

            btnNextStep.setEnabled( false );

            if ( simulationResult ) {
                processingStringToAccepted();
            } else {
                processingStringToRejected();
            }

        }
        
        drawPanel.repaint();
        
    }//GEN-LAST:event_btnNextStepActionPerformed

    private void btnPreviousStepActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPreviousStepActionPerformed
        
        processingStringToDefault();
        btnNextStep.setEnabled( true );
        
        if ( currentSimulationIndex > 0 ) {
            
            currentSimulationIndex--;
            changeInternalStatesSelection( currentSimulationState, false );

            processingString.setCurrentSymbol( currentSimulationIndex );
            currentSimulationState = simulationSteps.get( currentSimulationIndex );
            processingString.setCurrentState( currentSimulationState );

            changeInternalStatesSelection( currentSimulationState, true );
            
        }
        
        if ( currentSimulationIndex == 0 ) {
            btnPreviousStep.setEnabled( false );
        }
        
        drawPanel.repaint();
        
    }//GEN-LAST:event_btnPreviousStepActionPerformed
    
    private void processingStringToDefault() {
        processingString.setAccepted( false );
        processingString.setRejected( false );
        processingString.setColor( Constants.PROCESSING_STRING_COLOR );
        processingString.setCurrentSymbolColor( Constants.PROCESSING_STRING_CURRENT_SYMBOL_COLOR );
        processingString.setControlColor( Constants.PROCESSING_STRING_CONTROL_COLOR );
    }
    
    private void processingStringToAccepted() {
        processingString.setAccepted( true );
        processingString.setRejected( false );
        processingString.setColor( Constants.PROCESSING_STRING_ACCEPTED_COLOR );
        processingString.setCurrentSymbolColor( Constants.PROCESSING_STRING_CURRENT_SYMBOL_COLOR );
        processingString.setControlColor( Constants.PROCESSING_STRING_CONTROL_COLOR );
    }
    
    private void processingStringToRejected() {
        processingString.setAccepted( false );
        processingString.setRejected( true );
        processingString.setColor( Constants.PROCESSING_STRING_REJECTED_COLOR );
        processingString.setCurrentSymbolColor( Constants.PROCESSING_STRING_REJECTED_CURRENT_SYMBOL_COLOR );
        processingString.setControlColor( Constants.PROCESSING_STRING_REJECTED_CONTROL_COLOR );
    }
    
    private void changeInternalStatesSelection( State state, boolean selected ) {
        
        for ( State s : state.getInternalStates() ) {
            s.setSelected( selected );
        }
        
    }
    
    private void lookForSelectedShapes() {
        
        selectedState = nfa.getInterceptedState( xPressed, yPressed );
        selectedDrawingTransition = nfa.getInterceptedDrawingTransition( xPressed, yPressed );
        
        if ( selectedState != null ) {
            selectedState.setSelected( true );
        }
        
        if ( selectedDrawingTransition != null ) {
            selectedDrawingTransition.setSelected( true );
        }
        
    }
    
    private JScrollPane createJTextAreaShowData( String text, int rows, int cols ) {
        
        JTextArea ta = new JTextArea( text, rows, cols );
        ta.setFont( new Font( "monospaced", Font.BOLD, 14 ) );
        ta.setEditable( false );
        
        return new JScrollPane( ta );
        
    }
    
    private void changeGUI( boolean enable ) {
        
        btnAddState.setEnabled( enable );
        btnAddTransition.setEnabled( enable );
        btnMove.setEnabled( enable );
        btnShowFormalDefinition.setEnabled( enable );
        btnShowEquivalentDFA.setEnabled( enable );
        btnSave.setEnabled( enable );
        btnLoad.setEnabled( enable );
        btnClear.setEnabled( enable );
        
        areaStrings.setEnabled( enable );
        btnTestStrings.setEnabled( enable );
        txtStringSimulation.setEnabled( enable );
        btnEvaluateSimulation.setEnabled( enable );
        btnNextStep.setEnabled( enable );
        btnPreviousStep.setEnabled( enable );
        btnClearSimulation.setEnabled( enable );
        
    }
    
    private void clearSelectedShapes() {
        
        if ( selectedState != null ) {
            selectedState.setSelected( false );
            selectedState = null;
        }
        if ( selectedSourceState != null ) {
            selectedSourceState.setSelected( false );
            selectedSourceState = null;
        }
        if ( selectedTargetState != null ) {
            selectedTargetState.setSelected( false );
            selectedTargetState = null;
        }
        if ( mouseOverState != null ) {
            mouseOverState.setMouseOver( false );
            mouseOverState = null;
        }
        if ( selectedDrawingTransition != null ) {
            selectedDrawingTransition.setSelected( false );
            selectedDrawingTransition = null;
        }
        if ( mouseOverDrawingTransition != null ) {
            mouseOverDrawingTransition.setMouseOver( false );
            mouseOverDrawingTransition = null;
        }
        
        drawPanel.repaint();
        
    }
    
    private void createExample() throws IllegalArgumentException {
        
        State q0 = nfa.addState( true, false, 250, 200 );
        State q1 = nfa.addState( false, false, 400, 200 );
        State q2 = nfa.addState( false, true, 550, 200 );
        
        nfa.addTransition( q0, q0, '0' );
        nfa.addTransition( q0, q0, '1' );
        nfa.addTransition( q0, q1, '0' );
        
        nfa.addTransition( q1, q2, '1' );
        
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea areaStrings;
    private javax.swing.JToggleButton btnAddState;
    private javax.swing.JToggleButton btnAddTransition;
    private javax.swing.JButton btnClear;
    private javax.swing.JButton btnClearSimulation;
    private javax.swing.JButton btnEvaluateSimulation;
    private javax.swing.ButtonGroup btnGroup;
    private javax.swing.JButton btnLoad;
    private javax.swing.JToggleButton btnMove;
    private javax.swing.JButton btnNextStep;
    private javax.swing.JButton btnPreviousStep;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnSaveAsImage;
    private javax.swing.JButton btnShowEquivalentDFA;
    private javax.swing.JButton btnShowFormalDefinition;
    private javax.swing.JButton btnTestStrings;
    private br.com.davidbuzatto.jaas.gui.DrawPanel drawPanel;
    private javax.swing.JMenuItem itemAlias;
    private javax.swing.JMenuItem itemColor;
    private javax.swing.JMenuItem itemFinal;
    private javax.swing.JMenuItem itemInitial;
    private javax.swing.JMenuItem itemRemove;
    private javax.swing.JMenuItem itemTransitions;
    private javax.swing.JInternalFrame jifTests;
    private javax.swing.JLabel lblStringSImulation;
    private javax.swing.JPanel panelSimulation;
    private javax.swing.JPanel panelStrings;
    private javax.swing.JPopupMenu popupMenu;
    private javax.swing.JScrollPane scrollStrings;
    private javax.swing.JPopupMenu.Separator sepPop1;
    private javax.swing.JPopupMenu.Separator sepPop2;
    private javax.swing.JPopupMenu.Separator sepPop3;
    private javax.swing.JToolBar.Separator sepTool1;
    private javax.swing.JToolBar.Separator sepTool2;
    private javax.swing.JToolBar.Separator sepTool3;
    private javax.swing.JToolBar toolbar;
    private javax.swing.JTextField txtStringSimulation;
    // End of variables declaration//GEN-END:variables
}
