/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package br.com.davidbuzatto.jaas.gui;

import br.com.davidbuzatto.jaas.dfa.DFA;
import br.com.davidbuzatto.jaas.dfa.State;
import java.awt.Font;
import java.io.File;
import java.io.IOException;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.SwingUtilities;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author David
 */
public class JIFDFA extends javax.swing.JInternalFrame {

    private DFA dfa;
    private State selectedState;
    
    private State selectedSourceState;
    private State selectedTargetState;
    
    private double xPrev;
    private double yPrev;
    private double xPressed;
    private double yPressed;
    
    /**
     * Creates new form JIFDFA
     */
    public JIFDFA( boolean createStructuralTest ) {
        
        initComponents();
        
        setFrameIcon( new ImageIcon( getClass().getResource( "/br/com/davidbuzatto/jaas/gui/icons/dfa.png" ) ) );
        jifTests.setFrameIcon( new ImageIcon( getClass().getResource( "/br/com/davidbuzatto/jaas/gui/icons/dfa.png" ) ) );
        
        dfa = new DFA();
        drawPanel.addShape( dfa );
        
        if ( createStructuralTest ) {
            dfaStructuralTest( );
        }
        
        drawPanel.repaint();
        
        btnSave.setVisible( false );
        btnLoad.setVisible( false );
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings( "unchecked" )
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnGroup = new javax.swing.ButtonGroup();
        popupMenu = new javax.swing.JPopupMenu();
        itemInitial = new javax.swing.JMenuItem();
        itemFinal = new javax.swing.JMenuItem();
        sepPop1 = new javax.swing.JPopupMenu.Separator();
        itemTransitions = new javax.swing.JMenuItem();
        sepPop2 = new javax.swing.JPopupMenu.Separator();
        itemRemove = new javax.swing.JMenuItem();
        toolbar = new javax.swing.JToolBar();
        btnAddState = new javax.swing.JToggleButton();
        btnAddTransition = new javax.swing.JToggleButton();
        btnMove = new javax.swing.JToggleButton();
        sepTool1 = new javax.swing.JToolBar.Separator();
        btnShowTF = new javax.swing.JButton();
        btnShowFormalDefinition = new javax.swing.JButton();
        sepTool2 = new javax.swing.JToolBar.Separator();
        btnSave = new javax.swing.JButton();
        btnLoad = new javax.swing.JButton();
        btnSaveAsImage = new javax.swing.JButton();
        sepTool3 = new javax.swing.JToolBar.Separator();
        btnClear = new javax.swing.JButton();
        drawPanel = new br.com.davidbuzatto.jaas.gui.DrawPanel();
        jifTests = new javax.swing.JInternalFrame();
        btnTest = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        scrollStrings = new javax.swing.JScrollPane();
        areaStrings = new javax.swing.JTextArea();

        popupMenu.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
                popupMenuPopupMenuCanceled(evt);
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
            }
        });

        itemInitial.setText("set as initial");
        itemInitial.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemInitialActionPerformed(evt);
            }
        });
        popupMenu.add(itemInitial);

        itemFinal.setText("final");
        itemFinal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemFinalActionPerformed(evt);
            }
        });
        popupMenu.add(itemFinal);
        popupMenu.add(sepPop1);

        itemTransitions.setText("transitions");
        itemTransitions.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemTransitionsActionPerformed(evt);
            }
        });
        popupMenu.add(itemTransitions);
        popupMenu.add(sepPop2);

        itemRemove.setText("remove");
        itemRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemRemoveActionPerformed(evt);
            }
        });
        popupMenu.add(itemRemove);

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("DFA - Deterministic Finite Automaton");

        toolbar.setFloatable(false);

        btnGroup.add(btnAddState);
        btnAddState.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/davidbuzatto/jaas/gui/icons/ellipse.png"))); // NOI18N
        btnAddState.setMnemonic('S');
        btnAddState.setToolTipText("Add state");
        btnAddState.setFocusable(false);
        btnAddState.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnAddState.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnAddState.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddStateActionPerformed(evt);
            }
        });
        toolbar.add(btnAddState);

        btnGroup.add(btnAddTransition);
        btnAddTransition.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/davidbuzatto/jaas/gui/icons/arrow_right.png"))); // NOI18N
        btnAddTransition.setMnemonic('T');
        btnAddTransition.setToolTipText("Add transition");
        btnAddTransition.setFocusable(false);
        btnAddTransition.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnAddTransition.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnAddTransition.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddTransitionActionPerformed(evt);
            }
        });
        toolbar.add(btnAddTransition);

        btnGroup.add(btnMove);
        btnMove.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/davidbuzatto/jaas/gui/icons/cursor_openhand.png"))); // NOI18N
        btnMove.setMnemonic('M');
        btnMove.setSelected(true);
        btnMove.setToolTipText("Move");
        btnMove.setFocusable(false);
        btnMove.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnMove.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnMove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMoveActionPerformed(evt);
            }
        });
        toolbar.add(btnMove);
        toolbar.add(sepTool1);

        btnShowTF.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnShowTF.setForeground(new java.awt.Color(51, 153, 255));
        btnShowTF.setText("\u03B4");
        btnShowTF.setToolTipText("Transition function");
        btnShowTF.setFocusable(false);
        btnShowTF.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnShowTF.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnShowTF.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShowTFActionPerformed(evt);
            }
        });
        toolbar.add(btnShowTF);

        btnShowFormalDefinition.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnShowFormalDefinition.setForeground(new java.awt.Color(0, 204, 153));
        btnShowFormalDefinition.setText("\u03A3");
        btnShowFormalDefinition.setToolTipText("Formal definition");
        btnShowFormalDefinition.setFocusable(false);
        btnShowFormalDefinition.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnShowFormalDefinition.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnShowFormalDefinition.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShowFormalDefinitionActionPerformed(evt);
            }
        });
        toolbar.add(btnShowFormalDefinition);
        toolbar.add(sepTool2);

        btnSave.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/davidbuzatto/jaas/gui/icons/disk.png"))); // NOI18N
        btnSave.setToolTipText("Save");
        btnSave.setFocusable(false);
        btnSave.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnSave.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });
        toolbar.add(btnSave);

        btnLoad.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/davidbuzatto/jaas/gui/icons/folder.png"))); // NOI18N
        btnLoad.setToolTipText("Load");
        btnLoad.setFocusable(false);
        btnLoad.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnLoad.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnLoad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoadActionPerformed(evt);
            }
        });
        toolbar.add(btnLoad);

        btnSaveAsImage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/davidbuzatto/jaas/gui/icons/picture.png"))); // NOI18N
        btnSaveAsImage.setToolTipText("Save as Image");
        btnSaveAsImage.setFocusable(false);
        btnSaveAsImage.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnSaveAsImage.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnSaveAsImage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveAsImageActionPerformed(evt);
            }
        });
        toolbar.add(btnSaveAsImage);
        toolbar.add(sepTool3);

        btnClear.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/davidbuzatto/jaas/gui/icons/delete.png"))); // NOI18N
        btnClear.setToolTipText("Clear");
        btnClear.setFocusable(false);
        btnClear.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnClear.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });
        toolbar.add(btnClear);

        drawPanel.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                drawPanelMouseDragged(evt);
            }
        });
        drawPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                drawPanelMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                drawPanelMouseReleased(evt);
            }
        });

        javax.swing.GroupLayout drawPanelLayout = new javax.swing.GroupLayout(drawPanel);
        drawPanel.setLayout(drawPanelLayout);
        drawPanelLayout.setHorizontalGroup(
            drawPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        drawPanelLayout.setVerticalGroup(
            drawPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 464, Short.MAX_VALUE)
        );

        jifTests.setTitle("Tests");
        jifTests.setFocusable(false);
        jifTests.setVisible(true);

        btnTest.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/com/davidbuzatto/jaas/gui/icons/dfaBig.png"))); // NOI18N
        btnTest.setText("Test!");
        btnTest.setToolTipText("Test!");
        btnTest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTestActionPerformed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Strings"));

        areaStrings.setColumns(20);
        areaStrings.setRows(5);
        scrollStrings.setViewportView(areaStrings);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(scrollStrings, javax.swing.GroupLayout.DEFAULT_SIZE, 430, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(scrollStrings, javax.swing.GroupLayout.DEFAULT_SIZE, 94, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout jifTestsLayout = new javax.swing.GroupLayout(jifTests.getContentPane());
        jifTests.getContentPane().setLayout(jifTestsLayout);
        jifTestsLayout.setHorizontalGroup(
            jifTestsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jifTestsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnTest)
                .addContainerGap(225, Short.MAX_VALUE))
        );
        jifTestsLayout.setVerticalGroup(
            jifTestsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jifTestsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jifTestsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnTest, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(toolbar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(drawPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jifTests)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(toolbar, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(drawPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jifTests, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void itemInitialActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemInitialActionPerformed
        
        if ( selectedState != null ) {
            
            if ( dfa.getInitial() != null ) {
                dfa.getInitial().setInitial( false );
            }
            
            selectedState.setInitial( true );
            dfa.setInitial( selectedState );
            
        }
        
        clearSelectedStates();
        drawPanel.repaint();
        
    }//GEN-LAST:event_itemInitialActionPerformed

    private void itemFinalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemFinalActionPerformed
        
        if ( selectedState != null ) {
            selectedState.setFinal( !selectedState.isFinal() );
        }
        
        clearSelectedStates();
        drawPanel.repaint();
        
    }//GEN-LAST:event_itemFinalActionPerformed

    private void itemRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemRemoveActionPerformed
        
        if ( JOptionPane.showConfirmDialog( this, 
                "Remove state?", 
                "Remove", 
                JOptionPane.YES_NO_OPTION ) == JOptionPane.YES_OPTION ) {
            
            if ( selectedState != null ) {
                dfa.removeState( selectedState );
            }

            clearSelectedStates();
            drawPanel.repaint();
            
        }
        
    }//GEN-LAST:event_itemRemoveActionPerformed

    private void popupMenuPopupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_popupMenuPopupMenuCanceled
        clearSelectedStates();
    }//GEN-LAST:event_popupMenuPopupMenuCanceled

    private void clearSelectedStates() {
        
        if ( selectedState != null ) {
            selectedState.setSelected( false );
            selectedState = null;
        }
        if ( selectedSourceState != null ) {
            selectedSourceState.setSelected( false );
            selectedSourceState = null;
        }
        if ( selectedTargetState != null ) {
            selectedTargetState.setSelected( false );
            selectedTargetState = null;
        }
        
        drawPanel.repaint();
        
    }

    private void btnAddStateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddStateActionPerformed
        clearSelectedStates();
    }//GEN-LAST:event_btnAddStateActionPerformed

    private void btnAddTransitionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddTransitionActionPerformed
        clearSelectedStates();
    }//GEN-LAST:event_btnAddTransitionActionPerformed

    private void btnMoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMoveActionPerformed
        clearSelectedStates();
    }//GEN-LAST:event_btnMoveActionPerformed

    private void drawPanelMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_drawPanelMousePressed
        
        xPressed = evt.getX();
        yPressed = evt.getY();
            
        if ( SwingUtilities.isLeftMouseButton( evt ) ) {
            
            lookForSelectedState();
            
             if ( btnAddState.isSelected() ) {

                dfa.addState( false, false, evt.getX(), evt.getY() );
              
            } else if ( btnAddTransition.isSelected() ) {
                
                if ( selectedSourceState == null ) {
                    
                    selectedSourceState = dfa.getInterceptedState( evt.getX(), evt.getY() );
                    
                    if ( selectedSourceState != null ) {
                        selectedSourceState.setSelected( true );
                    }
                    
                } else if ( selectedTargetState == null ) {
                    
                    selectedTargetState = dfa.getInterceptedState( evt.getX(), evt.getY() );
                    
                    if ( selectedTargetState != null ) {
                        
                        selectedTargetState.setSelected( true );

                        if ( selectedTargetState != null ) {

                            String symbols = JOptionPane.showInputDialog( this, 
                                    String.format( "(%s) -> (%s) transition(s) symbol",
                                            selectedSourceState, selectedTargetState ) );

                            if ( symbols != null ) {

                                boolean duplicate = false;

                                try {

                                    for ( char s : symbols.trim().toCharArray() ) {
                                        dfa.addTransition( selectedSourceState, selectedTargetState, s );
                                    }

                                } catch ( IllegalArgumentException exc ) {
                                    duplicate = true;
                                }

                                if ( duplicate ) {
                                    JOptionPane.showMessageDialog( this, "Duplicated symbols were ignored!" );
                                }

                            }

                            selectedSourceState.setSelected( false );
                            selectedTargetState.setSelected( false );

                            selectedSourceState = null;
                            selectedTargetState = null;

                        }
                    
                    }
                    
                }
              
            } else if ( btnMove.isSelected() ) {

                if ( selectedState != null ) {
                    
                    xPrev = xPressed;
                    yPrev = yPressed;
                    
                }

            }
        
        } else if ( SwingUtilities.isRightMouseButton( evt ) ) {
            
            clearSelectedStates();
            lookForSelectedState();
            
            if ( selectedState != null ) {
                
                btnMove.setSelected( true );
                        
                if ( selectedState.isInitial() ) {
                    itemInitial.setVisible( false );
                } else {
                    itemInitial.setVisible( true );
                }
                
                if ( selectedState.isFinal() ) {
                    itemFinal.setText( "unset final" );
                } else {
                    itemFinal.setText( "set as final" );
                }
                
                popupMenu.show( this, evt.getX() + 20, evt.getY() + 50 );
                
            }
            
        }
        
        drawPanel.repaint();
        
    }//GEN-LAST:event_drawPanelMousePressed

    private void drawPanelMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_drawPanelMouseReleased
        
        if ( SwingUtilities.isLeftMouseButton( evt ) ) {
            
            if ( !btnAddTransition.isSelected() ) {
                clearSelectedStates();
            }

            drawPanel.repaint();
            
        }
        
    }//GEN-LAST:event_drawPanelMouseReleased

    private void drawPanelMouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_drawPanelMouseDragged
        
        if ( SwingUtilities.isLeftMouseButton( evt ) ) {
            
            if ( btnAddState.isSelected() ) {

            } else if ( btnAddTransition.isSelected() ) {

            } else if ( btnMove.isSelected() && selectedState != null ) {

                selectedState.move( evt.getX() - xPrev, evt.getY() - yPrev );

                xPrev = evt.getX();
                yPrev = evt.getY();
                
            }
        
        }
        
        drawPanel.repaint();
        
    }//GEN-LAST:event_drawPanelMouseDragged

    private void btnShowTFActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnShowTFActionPerformed
        JOptionPane.showMessageDialog( this, 
                createJTextAreaShowData( dfa.generateTransitionFunctionRep(), 20, 50 ), 
                "Transition Function", JOptionPane.INFORMATION_MESSAGE );
    }//GEN-LAST:event_btnShowTFActionPerformed

    private void btnShowFormalDefinitionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnShowFormalDefinitionActionPerformed
        JOptionPane.showMessageDialog( this, createJTextAreaShowData( dfa.toString(), 20, 50 ), 
                "Formal Definition", JOptionPane.INFORMATION_MESSAGE );
    }//GEN-LAST:event_btnShowFormalDefinitionActionPerformed

    private void btnTestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTestActionPerformed
        
        String[] strings = areaStrings.getText().split( "\n" );
        StringBuilder sb = new StringBuilder();
        
        try {
            
            for ( String string : strings ) {
                sb.append( String.format( "%s %s L(A)\n", 
                        string.length() == 0 ? "\u03B5" : string, 
                        dfa.accepts( string ) ? "\u2208" : "\u2209" ) );
            }

            JOptionPane.showMessageDialog( this, createJTextAreaShowData( sb.toString(), 20, 50 ), 
                    "Test Results", JOptionPane.INFORMATION_MESSAGE );
            
        } catch ( IllegalStateException exc ) {
            
            JOptionPane.showMessageDialog( this, exc.getMessage(), 
                    "ERROR", JOptionPane.ERROR_MESSAGE );
            
        }
        
    }//GEN-LAST:event_btnTestActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnSaveActionPerformed

    private void btnLoadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoadActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnLoadActionPerformed

    private void btnSaveAsImageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveAsImageActionPerformed
        
        try {
            
            JFileChooser jfc = new JFileChooser();
            jfc.setDialogTitle( "Save as Image" );
            jfc.setMultiSelectionEnabled( false );
            jfc.setFileFilter( new FileNameExtensionFilter( "Portable Network Graphics", "png" ) );
            
            if ( jfc.showSaveDialog( this ) == JFileChooser.APPROVE_OPTION ) {
                File f = jfc.getSelectedFile();
                if ( !f.getName().endsWith( ".png" ) ) {
                    f = new File( f.getAbsolutePath() + ".png" );
                }
                ImageIO.write( drawPanel.getImage(), "png", f );
            }
            
        } catch ( IOException exc ) {
            exc.printStackTrace();
        }
        
    }//GEN-LAST:event_btnSaveAsImageActionPerformed

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        
        if ( JOptionPane.showConfirmDialog( 
                this, 
                "Clear the current DFA?", 
                "Confirmation", 
                JOptionPane.YES_NO_OPTION ) == JOptionPane.YES_OPTION ) {
            
            dfa.clear();
        
        }
        
        drawPanel.repaint();
        
    }//GEN-LAST:event_btnClearActionPerformed

    private void itemTransitionsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemTransitionsActionPerformed
        
        ChangeTransitionsDialog ctd = new ChangeTransitionsDialog( null, selectedState, true );
        ctd.setVisible( true );
        
        clearSelectedStates();
        drawPanel.repaint();
        
    }//GEN-LAST:event_itemTransitionsActionPerformed
    
    private void lookForSelectedState() {
        
        selectedState = dfa.getInterceptedState( xPressed, yPressed );
        
        if ( selectedState != null ) {
            selectedState.setSelected( true );
        }
        
    }
    
    private JScrollPane createJTextAreaShowData( String text, int rows, int cols ) {
        
        JTextArea ta = new JTextArea( text, rows, cols );
        ta.setFont( new Font( "monospaced", Font.BOLD, 14 ) );
        ta.setEditable( false );
        
        return new JScrollPane( ta );
        
    }
    
    private void dfaStructuralTest() throws IllegalArgumentException {
        
        /*State q0 = dfa.addState( true, false, 100, 100 );
        State q1 = dfa.addState( false, false, 300, 100 );
        State q2 = dfa.addState( false, false, 500, 100 );
        State q3 = dfa.addState( false, true, 700, 100 );
        
        dfa.addTransition( q0, q0, '0' );
        dfa.addTransition( q0, q0, '5' );
        dfa.addTransition( q0, q1, '1' );
        dfa.addTransition( q0, q1, 'a' );
        
        dfa.addTransition( q1, q1, '1' );
        dfa.addTransition( q1, q1, '5' );
        dfa.addTransition( q1, q2, '2' );
        dfa.addTransition( q1, q2, 'b' );
        
        dfa.addTransition( q2, q2, '2' );
        dfa.addTransition( q2, q2, '5' );
        dfa.addTransition( q2, q3, '3' );
        dfa.addTransition( q2, q3, 'c' );
        
        dfa.addTransition( q3, q3, '3' );
        dfa.addTransition( q3, q3, '5' );*/
        
        State q0 = dfa.addState( true, false, 100, 200 );
        State q1 = dfa.addState( false, false, 300, 100 );
        State q2 = dfa.addState( false, true, 500, 100 );
        State q3 = dfa.addState( false, true, 300, 300 );
        State q4 = dfa.addState( false, false, 500, 300 );
        
        dfa.addTransition( q0, q1, '0' );
        dfa.addTransition( q0, q3, '1' );
        
        dfa.addTransition( q1, q2, '0' );
        dfa.addTransition( q2, q1, '0' );
        
        dfa.addTransition( q3, q4, '1' );
        dfa.addTransition( q4, q3, '1' );
        
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea areaStrings;
    private javax.swing.JToggleButton btnAddState;
    private javax.swing.JToggleButton btnAddTransition;
    private javax.swing.JButton btnClear;
    private javax.swing.ButtonGroup btnGroup;
    private javax.swing.JButton btnLoad;
    private javax.swing.JToggleButton btnMove;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnSaveAsImage;
    private javax.swing.JButton btnShowFormalDefinition;
    private javax.swing.JButton btnShowTF;
    private javax.swing.JButton btnTest;
    private br.com.davidbuzatto.jaas.gui.DrawPanel drawPanel;
    private javax.swing.JMenuItem itemFinal;
    private javax.swing.JMenuItem itemInitial;
    private javax.swing.JMenuItem itemRemove;
    private javax.swing.JMenuItem itemTransitions;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JInternalFrame jifTests;
    private javax.swing.JPopupMenu popupMenu;
    private javax.swing.JScrollPane scrollStrings;
    private javax.swing.JPopupMenu.Separator sepPop1;
    private javax.swing.JPopupMenu.Separator sepPop2;
    private javax.swing.JToolBar.Separator sepTool1;
    private javax.swing.JToolBar.Separator sepTool2;
    private javax.swing.JToolBar.Separator sepTool3;
    private javax.swing.JToolBar toolbar;
    // End of variables declaration//GEN-END:variables
}
